{% extends 'base_logged.html.twig' %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.13.0/moment-with-locales.min.js"></script>
    <script>
        $(function () {
            moment.locale('en');
            $('[data-moment]').each(function () {
                $(this).text(moment.unix($(this).text()).fromNow());
            });
        });
    </script>
    <script>
        var secret = '{{ app.user.secret }}';
        var endpoint = '{{ webHook.endpoint }}';
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": true,
            "progressBar": true,
            "positionClass": "toast-bottom-right",
            "preventDuplicates": true,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "10000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };
        var responseHandlers = {
            '_subscribeWebHook': function (data) {
                //console.log(data);
            },
            '_forwardRequest': function (data) {
                var request = data.request;
                toastr.info('Click this notification to view details.', '<span class="label label-success">' + request.method + '</span> received on ' + endpoint + '!', {
                    'onclick': function () {
                        location.reload();
                    }
                });
            }
        };
        function handleMessage(msg) {
            var type = msg.type;
            delete msg.type;
            if (responseHandlers.hasOwnProperty(type)) {
                if (msg['status'] != 'ok') {
                    console.error('Response in error:', type, msg);
                } else {
                    delete msg['status'];
                    delete msg['comKey'];
                    responseHandlers[type](msg);
                }
            } else {
                console.error('Message type not handled.', type, msg);
            }
        }
        function call(type) {
            var comKey = Math.round(Math.random() * 10000);
            var msg = {
                "type": type,
                "comKey": comKey,
                "secret": secret,
                "endpoint": endpoint
            };
            window.conn.send(JSON.stringify(msg));
        }

        $(function () {
            window.conn = new WebSocket('{{ socket_server_url }}');
            window.conn.onopen = function (e) {
                call("subscribeWebHook");
            };

            window.conn.onmessage = function (e) {
                handleMessage(JSON.parse(e.data));
            };
        });

    </script>
{% endblock %}

{% block body %}

    <p>
        <a class="btn btn-default btn-sm" href="{{ path('webhook_index') }}">
            <i class="glyphicon glyphicon-backward"></i>
            Back to the list of all forwards
        </a>
    </p>

    <h1><i class="glyphicon glyphicon-screenshot"></i> {{ url('notifications', {'username': app.user.username, endpoint: webHook.endpoint}) }}</h1>



    <h3>Received notifications</h3>

    {{ form_start(clearNotificationsForm, {attr:{class:'text-center'}}) }}
    <a class="btn btn-default" href="{{ path('webhook_simulate_notification', {'id': webHook.id}) }}">
        <i class="glyphicon glyphicon-refresh"></i>
        Simulate notification
    </a>
    {% if webHook.notifications | length %}
        <button class="btn btn-default" href="{{ path('webhook_clear_notification') }}">
            <i class="glyphicon glyphicon-trash"></i> Clear notifications
        </button>
    {% endif %}
    {{ form_end(clearNotificationsForm) }}

    {% if webHook.notifications | length %}
        <table id="notifications" class="table table-striped table-hover table-bordered">
            <thead>
            <tr>
                <th>Method</th>
                <th>Query parameters</th>
                <th>Request body (POST)</th>
                <th>Headers</th>
                <th>Created at</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            {% for notificationData in notificationsData %}
                {% include "webhook/_notificationRow.html.twig"  with {notificationData:notificationData} only %}
            {% endfor %}
            </tbody>
        </table>
    {% else %}
        <br>
        <div class="well">
            <h3>What a fresh URL!</h3>
            <p>No notification sent on this URL.
                Impatient ? Just <a href="{{ path('webhook_simulate_notification', {id: webHook.id}) }}">simulate a
                    notification</a>.
            </p>
        </div>
    {% endif %}

    <h1><i class="glyphicon glyphicon-education"></i> Configure this forward on your local host</h1>

    <div class="well">

        <h3>1) If it is not already done, install and configure the client on your local environment</h3>
        <pre><code class="bash" id="install-command">curl -SLo localhook https://git.io/vwu9e && chmod +x localhook && sudo mv localhook /usr/local/bin/ && localhook auto-configure "{{ socket_secret }}"</code></pre>
        <button class="btn btn-xs btn-default btn-clipboard" type="button"
                data-clipboard-target="#install-command">
            Copy this install command
        </button>
        <br>

        <h3>2) Run the client</h3>
        <pre><code class="bash" id="run-command">localhook run</code></pre>
        <button class="btn btn-xs btn-default btn-clipboard" type="button"
                data-clipboard-target="#run-command">
            Copy this run command
        </button>

        <p>The client will automatically detect the new forward.</p>
    </div>

{% endblock %}
